from pathlib import Path

def secure_path_traversal(args):
    # Sanitize args.path
    print(args.path.endswith('/'))
    if "../" in args.path or (args.path.endswith('/') or "/" in args.path or "\\" in args.path):
        raise ValueError("Invalid characters in the path.")
    # Sanitize args.varFile
    if "../" in args.varFile or ("/" in args.varFile or "\\" in args.varFile):
        raise ValueError("Invalid characters in the filename.")

    # Construct the path only if the inputs are secure
    paramFile = Path(f"{args.path}/{args.varFile}")
    print(paramFile)

    return paramFile

# Example usage
if __name__ == "__main__":
    class Args:
        def __init__(self, path, varFile):
            self.path = "test"
            self.varFile = "../A.txt"

    args = Args("secure_path", "secure_file.txt")
    secure_path_traversal(args)
    # Proceed with the sanitized paramFile
